generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmailStatus {
  DRAFT
  SCHEDULED
  SENT
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  email String @unique

  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  workspace Workspace?

  @@map("User")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("Session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("Account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("Verification")
}

model Workspace {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  slug   String @unique
  userId String @unique

  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscribers Subscriber[]
  forms       Form[]
  templates   Template[]
  sequences   EmailSequence[]
  campaigns   EmailCampaign[]
  metrics     WorkspaceMetrics?
  plan        SubscriptionPlan?
}

model Subscriber {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  email       String
  workspaceId String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Form {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  slug        String   @unique
  workspaceId String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Template {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  html        String   @db.Text
  workspaceId String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model EmailSequence {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  workspaceId String

  workspace Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  steps     SequenceStep[]
  metrics   EmailSequenceAnalytics?
}

model SequenceStep {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  subject     String
  html        String   @db.Text
  delayInDays Int
  sequenceId  String

  sequence EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
}

model EmailSequenceAnalytics {
  id                String @id @default(cuid())
  sequenceId        String @unique
  totalEmailsSent   Int    @default(0)
  totalOpens        Int    @default(0)
  totalClicks       Int    @default(0)
  totalUnsubscribes Int    @default(0)

  sequence EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
}

model EmailCampaign {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  subject     String
  html        String      @db.Text
  status      EmailStatus @default(DRAFT)
  scheduledAt DateTime?
  workspaceId String

  workspace Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  analytics CampaignAnalytics?
}

model CampaignAnalytics {
  id              String @id @default(cuid())
  campaignId      String @unique
  openRate        Float  @default(0)
  clickRate       Float  @default(0)
  bounceRate      Float  @default(0)
  unsubscribeRate Float  @default(0)
  totalSent       Int    @default(0)
  totalOpens      Int    @default(0)
  totalClicks     Int    @default(0)

  campaign EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model WorkspaceMetrics {
  id                 String @id @default(cuid())
  workspaceId        String @unique
  totalSubscribers   Int    @default(0)
  totalEmailsSent    Int    @default(0)
  totalOpens         Int    @default(0)
  totalClicks        Int    @default(0)
  totalBounces       Int    @default(0)
  totalUnsubscribes  Int    @default(0)
  formConversionRate Float  @default(0)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id              String  @id @default(cuid())
  workspaceId     String  @unique
  stripePriceId   String
  active          Boolean @default(true)
  subscriberLimit Int

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}
